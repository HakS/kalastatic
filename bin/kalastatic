#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */

var KalaStatic = require('..')
var program = require('commander')
var nconf = require('nconf')
var path = require('path')
var browserSync = require('browser-sync')
var fs = require('fs')
var mkdirp = require('mkdirp').sync

function retrieveConfig(options) {
  nconf.argv()
   .env()
   .file('kalastatic', {
     file: options.config || 'kalastatic.yaml',
     format: require('nconf-yaml')
   })
   .file('package', {
     file: 'package.json'
   })
   return nconf;
}

program
  .version(require('../package.json').version)

program
  .command('build')
  .description('Build in the current working directory, using the given config file.')
  .option('-c, --config <file>', 'set the configuration file, defaults to kalastatic.yaml')
  .action(function (options) {
    var conf = retrieveConfig(options);
    var kalastatic = new KalaStatic(conf);
    kalastatic.build().catch(function (err) {
      console.error(err)
      process.exitCode = 1
    })
  })

program
  .command('start')
  .description('Watch and serve KalaStatic')
  .option('-c, --config <file>', 'set the configuration file, defaults to kalastatic.yaml')
  .action(function (options) {
    // Build the KalaStatic application, and get the config for it.
    var kalastatic = new KalaStatic(retrieveConfig(options));
    var conf = kalastatic.nconf
    var bsIndex = conf.get('bsIndex')
    var bsBrowser = conf.get('bsBrowser')
    var base = conf.get('base')
    var source = conf.get('source')
    var destination = conf.get('destination')
    var finalSource = path.join(base, source, '**')
    var finalDest = path.join(base, destination)
    var bsWebroot = conf.get('bsWebroot')

    // Build KalaStatic to make sure it works first.
    kalastatic.build().then(function () {
      // Build an unhandled rejection error callback.
      process.on('unhandledRejection', function (reason) {
        console.error('Unhandled error: ' + reason)
      });

      // Start up the BrowserSync server.
      var bs = browserSync.create('kalastatic')

      // Set up the server.
      bs.init({
        server: bsWebroot || finalDest,
        browser: bsBrowser,
        index: bsIndex
      })

      // Create a watch task.
      bs.watch(finalSource).on('change', function () {
        // Rebuild KalaStatic.
        kalastatic.build().then(function () {
          // When changes, reload the page.
          bs.reload('*')
        }).catch(function (err) {
          // When errors occur, report them to the console.
          console.error(err)
        })
      })
    }).catch(function (err) {
      // KalaStatic failed, so report it and exit out.
      console.error(err)
      process.exitCode = 1
    })
  })

/**
 * Creates a file if it doesn't already exist.
 */
function createFile(filename, contents) {
  contents = contents || ''
  if (fs.existsSync(filename)) {
    console.log('The file exists!')
    return
  }

  fs.writeFileSync(filename, contents)
  console.log('The file was saved!')
}

/**
 * Creates the base files for a component.
 */
function createComponent(dir, objectToCreate) {
  var component = objectToCreate.split("/")
  var basePath = path.join(dir, component[0], component[1])
  mkdirp(basePath)
  var scssFile = path.join(basePath, "_"+component[1]+'.scss')
  var jsonFile = path.join(basePath, component[1]+'.json')
  var twigFile = path.join(basePath, component[1]+'.twig')
  fs.writeFileSync(scssFile, '// Component')
  fs.writeFileSync(jsonFile, '{}')
  fs.writeFileSync(twigFile, '{# Component #}')
}

program
  .command('create-component <objectToCreate> [otherObjects...]')
  .alias('cc')
  .description('Automates the creation of… things')
  .option('-d, --directory <path>', 'where to run')
  .parse(process.argv)
  .action(function (objectToCreate, otherObjects, options) {
    console.log("kalastatic creating component »»", objectToCreate)
    var dir = options.directory || "src/components/"
    createComponent(dir,objectToCreate)
    if(otherObjects.length > 0) {
      otherObjects.forEach( function(element){
        createComponent(dir,element)
      })
    }
  })

if (!process.argv.slice(2).length) {
  program.outputHelp();
}
else {
  program.parse(process.argv);
}
