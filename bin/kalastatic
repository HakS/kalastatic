#!/usr/bin/env node

/**
 * Module dependencies.
 */

var KalaStatic = require('..')
var program = require('commander')
var nconf = require('nconf')
var fs = require('fs')
var path = require('path')

function retrieveConfig(options) {
  nconf.argv()
   .env()
   .file('kalastatic', {
     file: options.config || 'kalastatic.yaml',
     format: require('nconf-yaml')
   })
   .file('package', {
     file: 'package.json'
   })
   return nconf;
}

program
  .version(require('../package.json').version)

program
  .command('build')
  .description('Build in the current working directory, using the given config file.')
  .option('-c, --config <file>', 'set the configuration file, defaults to kalastatic.yaml')
  .action(function (options) {
    var conf = retrieveConfig(options);
    var kalastatic = new KalaStatic(conf);
    kalastatic.build().catch(function (err) {
      console.error(err)
      process.exitCode = 1
    })
  })

program
  .command('start')
  .description('Watch and serve KalaStatic')
  .option('-c, --config <file>', 'set the configuration file, defaults to kalastatic.yaml')
  .action(function (options) {
    var conf = retrieveConfig(options);
    var kalastatic = new KalaStatic(conf);

    var build = function () {
      kalastatic.build().catch(function (err) {
        console.error(err)
      })
    }

    build();

    var base = conf.get('base') || '.'
    var source = conf.get('source') || 'src'
    var finalSource = path.join(base, source)
    fs.watch(finalSource, {recursive: true}, function () {
      build();
    })
  })

if (!process.argv.slice(2).length) {
  program.outputHelp();
}
else {
  program.parse(process.argv);
}
